!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BE_DICT	src/bencode.h	/^	BE_DICT,$/;"	e	enum:__anon1
BE_INT	src/bencode.h	/^	BE_INT,$/;"	e	enum:__anon1
BE_LIST	src/bencode.h	/^	BE_LIST,$/;"	e	enum:__anon1
BE_STR	src/bencode.h	/^	BE_STR,$/;"	e	enum:__anon1
BTDATA_H	src/btdata.h	6;"	d
BT_COMPLETED	src/btdata.h	27;"	d
BT_STARTED	src/btdata.h	25;"	d
BT_STOPPED	src/btdata.h	26;"	d
Buffer	src/btdata.h	/^char* Buffer;$/;"	v
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS= -std=gnu99 -g -pthread  -fno-stack-protector -z execstack -mpreferred-stack-boundary=2 -ggdb$/;"	m
Computed	src/sha1.h	/^    int Computed;               \/* Is the digest computed?          *\/$/;"	m	struct:SHA1Context
Corrupted	src/sha1.h	/^    int Corrupted;              \/* Is the message digest corruped?  *\/$/;"	m	struct:SHA1Context
DOWNLOAD_LIMIT	src/btdata.h	22;"	d
HANDSHAKE_LEN	src/btdata.h	12;"	d
HANDSHAKE_LEN	src/message.h	14;"	d
KEEP_ALIVE_INTERVAL	src/btdata.h	18;"	d
KEEP_ALIVE_INTERVAL	src/message.h	15;"	d
LIBS	Makefile	/^LIBS= -lpthread$/;"	m
LISTEN_Q	src/btdata.h	16;"	d
LISTEN_Q	src/message.h	13;"	d
Length_High	src/sha1.h	/^    unsigned Length_High;       \/* Message length in bits           *\/$/;"	m	struct:SHA1Context
Length_Low	src/sha1.h	/^    unsigned Length_Low;        \/* Message length in bits           *\/$/;"	m	struct:SHA1Context
LocalList	src/message.h	/^peer_t *LocalList[4];$/;"	v
MAXLINE	src/util.h	19;"	d
MAX_CON	src/message.h	12;"	d
MAX_LINE	peer_to_peer.c	12;"	d	file:
MAX_PEERS	src/btdata.h	17;"	d
MAX_PEERS	src/peer_to_peer.h	3;"	d
Message_Block	src/sha1.h	/^    unsigned char Message_Block[64]; \/* 512-bit message blocks      *\/$/;"	m	struct:SHA1Context
Message_Block_Index	src/sha1.h	/^    int Message_Block_Index;    \/* Index into message block array   *\/$/;"	m	struct:SHA1Context
Message_Digest	src/sha1.h	/^    unsigned Message_Digest[5]; \/* Message Digest (output)          *\/$/;"	m	struct:SHA1Context
OBJS	Makefile	/^OBJS=src\/util.o \\$/;"	m
RECV_SLEEP	src/btdata.h	23;"	d
REQUEST_LEN	src/btdata.h	21;"	d
REQUEST_LEN	src/peer_to_peer.h	4;"	d
REQUEST_TIME	src/btdata.h	20;"	d
REQUEST_TIME	src/peer_to_peer.h	2;"	d
SHA1CircularShift	src/sha1.c	46;"	d	file:
SHA1Context	src/sha1.h	/^typedef struct SHA1Context$/;"	s
SHA1Context	src/sha1.h	/^} SHA1Context;$/;"	t	typeref:struct:SHA1Context
SHA1Input	src/sha1.c	/^void SHA1Input(     SHA1Context         *context,$/;"	f
SHA1PadMessage	src/sha1.c	/^void SHA1PadMessage(SHA1Context *context)$/;"	f
SHA1ProcessMessageBlock	src/sha1.c	/^void SHA1ProcessMessageBlock(SHA1Context *context)$/;"	f
SHA1Reset	src/sha1.c	/^void SHA1Reset(SHA1Context *context)$/;"	f
SHA1Result	src/sha1.c	/^int SHA1Result(SHA1Context *context)$/;"	f
SOURCES	Makefile	/^SOURCES=src\/util.c \\$/;"	m
TARGET	Makefile	/^TARGET=simpletorrent$/;"	m
TESTA	src/shatest.c	28;"	d	file:
TESTB	src/shatest.c	31;"	d	file:
TESTB_1	src/shatest.c	29;"	d	file:
TESTB_2	src/shatest.c	30;"	d	file:
TESTC	src/shatest.c	32;"	d	file:
UTIL_H	src/util.h	17;"	d
WAIT_TIME	src/btdata.h	19;"	d
WAIT_TIME	src/message.h	16;"	d
_BENCODE_H	src/bencode.h	14;"	d
_SHA1_H_	src/sha1.h	25;"	d
_announce_url_t	src/btdata.h	/^typedef struct _announce_url_t {$/;"	s
_be_decode	src/bencode.c	/^static be_node *_be_decode(const char **data, long long *data_len)$/;"	f	file:
_be_decode_int	src/bencode.c	/^static long long _be_decode_int(const char **data, long long *data_len)$/;"	f	file:
_be_decode_str	src/bencode.c	/^static char *_be_decode_str(const char **data, long long *data_len)$/;"	f	file:
_be_dump	src/bencode.c	/^static void _be_dump(be_node *node, ssize_t indent)$/;"	f	file:
_be_dump_indent	src/bencode.c	/^static void _be_dump_indent(ssize_t indent)$/;"	f	file:
_be_free_str	src/bencode.c	/^static inline void _be_free_str(char *str)$/;"	f	file:
_handshake	src/btdata.h	/^typedef struct _handshake$/;"	s
_handshake	src/message.h	/^typedef struct _handshake$/;"	s
_peer_t	src/btdata.h	/^typedef struct _peer_t {$/;"	s
_peer_wire	src/message.h	/^typedef struct _peer_wire$/;"	s
_peerdata	src/btdata.h	/^typedef struct _peerdata {$/;"	s
_torrentmetadata	src/btdata.h	/^typedef struct _torrentmetadata {$/;"	s
_tracker_data	src/btdata.h	/^typedef struct _tracker_data {$/;"	s
_tracker_request	src/btdata.h	/^typedef struct _tracker_request {$/;"	s
_tracker_response	src/btdata.h	/^typedef struct _tracker_response {$/;"	s
announce	src/btdata.h	/^	char announce[100];			\/\/ 此结点代表的服务器的URL$/;"	m	struct:tracker_node
announce	src/btdata.h	/^  char* announce; \/\/ tracker的URL$/;"	m	struct:_torrentmetadata
announce_list	src/btdata.h	/^typedef struct announce_list$/;"	s
announce_list	src/btdata.h	/^}announce_list;$/;"	t	typeref:struct:announce_list
announce_url_t	src/btdata.h	/^} announce_url_t;$/;"	t	typeref:struct:_announce_url_t
be_alloc	src/bencode.c	/^static be_node *be_alloc(be_type type)$/;"	f	file:
be_decode	src/bencode.c	/^be_node *be_decode(const char *data)$/;"	f
be_decoden	src/bencode.c	/^be_node *be_decoden(const char *data, long long len)$/;"	f
be_dict	src/bencode.h	/^typedef struct be_dict {$/;"	s
be_dict	src/bencode.h	/^} be_dict;$/;"	t	typeref:struct:be_dict
be_dump	src/bencode.c	/^void be_dump(be_node *node)$/;"	f
be_free	src/bencode.c	/^void be_free(be_node *node)$/;"	f
be_node	src/bencode.h	/^typedef struct be_node {$/;"	s
be_node	src/bencode.h	/^} be_node;$/;"	t	typeref:struct:be_node
be_str_len	src/bencode.c	/^long long be_str_len(be_node *node)$/;"	f
be_type	src/bencode.h	/^} be_type;$/;"	t	typeref:enum:__anon1
begin	src/btdata.h	/^	unsigned int begin;$/;"	m	struct:peer_wire_cancel
begin	src/btdata.h	/^	unsigned int begin;$/;"	m	struct:peer_wire_piece_head
begin	src/btdata.h	/^	unsigned int begin;$/;"	m	struct:peer_wire_reqeust
begin	src/peer_to_peer.h	/^	unsigned int begin;$/;"	m	struct:peer_wire_cancel
begin	src/peer_to_peer.h	/^	unsigned int begin;$/;"	m	struct:peer_wire_piece_head
begin	src/peer_to_peer.h	/^	unsigned int begin;$/;"	m	struct:peer_wire_reqeust
choked	src/btdata.h	/^  int choked;         \/\/ 作为下载者, 我们被远端peer阻塞$/;"	m	struct:_peer_t
choking	src/btdata.h	/^  int choking;        \/\/ 作为上传者, 阻塞远端peer$/;"	m	struct:_peer_t
client_shutdown	src/shutdown.c	/^void client_shutdown(int sig)$/;"	f
compare_info_hash	src/message.c	/^int compare_info_hash(int info_hash1[], int info_hash2[])$/;"	f
connect_to_host	src/util.c	/^int connect_to_host(char* ip, int port)$/;"	f
count	src/message.c	/^int count = 0;      \/\/用来标记已存的结构$/;"	v
count	src/message.h	/^int count;	\/\/用来标记已存的结构$/;"	v
d	src/bencode.h	/^		struct be_dict *d;$/;"	m	union:be_node::__anon2	typeref:struct:be_node::__anon2::be_dict
data	src/btdata.h	/^  char* data;     \/\/ B编码的字符串$/;"	m	struct:_tracker_response
download_count	src/btdata.h	/^	int download_count;		\/\/同一时间从单个peer下载的分片数$/;"	m	struct:_peer_t
downloaded	src/btdata.h	/^  int downloaded;$/;"	m	struct:_tracker_request
file_len	src/util.c	/^int file_len(FILE* fp)$/;"	f
find_peer_id	src/message.c	/^int find_peer_id(char peer_id[])$/;"	f
g_done	src/btdata.h	/^int g_done; \/\/ 表明程序是否应该终止$/;"	v
g_downloaded	src/btdata.h	/^int g_downloaded;$/;"	v
g_filedata	src/btdata.h	/^char* g_filedata;      \/\/ 文件的实际数据$/;"	v
g_filelen	src/btdata.h	/^int g_filelen;$/;"	v
g_infohash	src/btdata.h	/^int g_infohash[5]; \/\/ 要共享或要下载的文件的SHA1哈希值, 每个客户端同时只能处理一个文件$/;"	v
g_left	src/btdata.h	/^int g_left;$/;"	v
g_my_id	src/btdata.h	/^char g_my_id[20];$/;"	v
g_my_ip	src/btdata.h	/^char g_my_ip[16]; \/\/ 格式为XXX.XXX.XXX.XXX, null终止$/;"	v
g_num_pieces	src/btdata.h	/^int g_num_pieces;$/;"	v
g_peerport	src/btdata.h	/^int g_peerport; \/\/ peer监听的端口号$/;"	v
g_torrentmeta	src/btdata.h	/^torrentmetadata_t* g_torrentmeta;$/;"	v
g_tracker_ip	src/btdata.h	/^char g_tracker_ip[16]; \/\/ tracker的IP地址, 格式为XXX.XXX.XXX.XXX(null终止)$/;"	v
g_tracker_port	src/btdata.h	/^int g_tracker_port;$/;"	v
g_tracker_response	src/btdata.h	/^tracker_data *g_tracker_response;$/;"	v
g_uploaded	src/btdata.h	/^int g_uploaded;$/;"	v
get_peer_data	src/process_tracker_response.c	/^void get_peer_data(peerdata* peer, be_node* ben_res)$/;"	f
get_peers	src/process_tracker_response.c	/^void get_peers(tracker_data* td, be_node* peer_list)$/;"	f
get_tracker_data	src/process_tracker_response.c	/^tracker_data* get_tracker_data(char* data, int len)$/;"	f
hand_shake	src/message.c	/^int hand_shake(int sockfd)$/;"	f
handshake	src/btdata.h	/^} handshake;$/;"	t	typeref:struct:_handshake
handshake	src/message.h	/^} handshake;$/;"	t	typeref:struct:_handshake
have_interest	src/btdata.h	/^  int have_interest;  \/\/ 作为下载者, 对远端peer的分片有兴趣$/;"	m	struct:_peer_t
head	src/btdata.h	/^	peer_wire_h head;$/;"	m	struct:peer_wire_have
head	src/peer_to_peer.h	/^	peer_wire_h head;$/;"	m	struct:peer_wire_cancel
head	src/peer_to_peer.h	/^	peer_wire_h head;$/;"	m	struct:peer_wire_have
head	src/peer_to_peer.h	/^	peer_wire_h head;$/;"	m	struct:peer_wire_piece_head
head	src/peer_to_peer.h	/^	peer_wire_h head;$/;"	m	struct:peer_wire_reqeust
hostname	src/btdata.h	/^  char* hostname;$/;"	m	struct:_announce_url_t
i	src/bencode.h	/^		long long i;$/;"	m	union:be_node::__anon2
id	src/btdata.h	/^	unsigned char id;$/;"	m	struct:peer_wire_head
id	src/btdata.h	/^  char id[21]; \/\/ 20用于null终止符$/;"	m	struct:_peerdata
id	src/peer_to_peer.h	/^	unsigned char id;$/;"	m	struct:peer_wire_head
index	src/btdata.h	/^	unsigned int index;$/;"	m	struct:peer_wire_cancel
index	src/btdata.h	/^	unsigned int index;$/;"	m	struct:peer_wire_piece_head
index	src/btdata.h	/^	unsigned int index;$/;"	m	struct:peer_wire_reqeust
index	src/peer_to_peer.h	/^	unsigned int index;$/;"	m	struct:peer_wire_cancel
index	src/peer_to_peer.h	/^	unsigned int index;$/;"	m	struct:peer_wire_piece_head
index	src/peer_to_peer.h	/^	unsigned int index;$/;"	m	struct:peer_wire_reqeust
info	src/btdata.h	/^	announce_url_t* info;$/;"	m	struct:announce_list
info_hash	src/btdata.h	/^	int info_hash[5];$/;"	m	struct:_handshake
info_hash	src/btdata.h	/^  int info_hash[5]; \/\/ torrent的info_hash值(info键对应值的SHA1哈希值)$/;"	m	struct:_torrentmetadata
info_hash	src/btdata.h	/^  int info_hash[5];$/;"	m	struct:_tracker_request
info_hash	src/message.h	/^　　	int info_hash[5];$/;"	m	struct:_handshake
init	src/simpletorrent.c	/^void init()$/;"	f
interested	src/btdata.h	/^  int interested;     \/\/ 远端peer对我们的分片有兴趣$/;"	m	struct:_peer_t
interval	src/btdata.h	/^  int interval;$/;"	m	struct:_tracker_data
ip	src/btdata.h	/^  char ip[16]; \/\/ 自己的IP地址, 格式为XXX.XXX.XXX.XXX, 最后以'\\0'结尾$/;"	m	struct:_tracker_request
ip	src/btdata.h	/^  char* ip; \/\/ Null终止$/;"	m	struct:_peerdata
judgeTimeOut	src/message.c	/^void* judgeTimeOut()$/;"	f
keep_alive	src/message.c	/^void* keep_alive(void* sock)$/;"	f
key	src/bencode.h	/^	char *key;$/;"	m	struct:be_dict
l	src/bencode.h	/^		struct be_node **l;$/;"	m	union:be_node::__anon2	typeref:struct:be_node::__anon2::be_node
left	src/btdata.h	/^  int left;$/;"	m	struct:_tracker_request
len	src/btdata.h	/^	unsigned char len;$/;"	m	struct:_handshake
len	src/message.h	/^	unsigned int len;$/;"	m	struct:_peer_wire
len	src/message.h	/^　　	unsigned char len;$/;"	m	struct:_handshake
length	src/btdata.h	/^	unsigned int length;$/;"	m	struct:peer_wire_cancel
length	src/btdata.h	/^	unsigned int length;$/;"	m	struct:peer_wire_head
length	src/btdata.h	/^	unsigned int length;$/;"	m	struct:peer_wire_reqeust
length	src/btdata.h	/^  int length;     \/\/ 文件长度, 以字节为单位$/;"	m	struct:_torrentmetadata
length	src/peer_to_peer.h	/^	unsigned int length;$/;"	m	struct:peer_wire_cancel
length	src/peer_to_peer.h	/^	unsigned int length;$/;"	m	struct:peer_wire_head
length	src/peer_to_peer.h	/^	unsigned int length;$/;"	m	struct:peer_wire_reqeust
listen_connection	src/message.c	/^void* listen_connection()$/;"	f
main	src/shatest.c	/^int main()$/;"	f
main	src/simpletorrent.c	/^int main(int argc, char **argv) $/;"	f
make_listen_port	src/util.c	/^int make_listen_port(int port)$/;"	f
make_tracker_request	src/make_tracker_request.c	/^char* make_tracker_request(int event, int* mlen)$/;"	f
name	src/btdata.h	/^	char name[19];$/;"	m	struct:_handshake
name	src/btdata.h	/^  char name[20]; $/;"	m	struct:_peer_t
name	src/btdata.h	/^  char* name;     \/\/ 文件名$/;"	m	struct:_torrentmetadata
name	src/message.h	/^　　	char name[19];$/;"	m	struct:_handshake
next	src/btdata.h	/^	struct announce_list* next;$/;"	m	struct:announce_list	typeref:struct:announce_list::announce_list
next	src/btdata.h	/^	struct peer_list* next;$/;"	m	struct:peer_list	typeref:struct:peer_list::peer_list
next	src/btdata.h	/^	struct tracker_node* next;	\/\/ 指向下一个服务器URL节点$/;"	m	struct:tracker_node	typeref:struct:tracker_node::tracker_node
num_pieces	src/btdata.h	/^  int num_pieces; \/\/ 分片数量(为方便起见)$/;"	m	struct:_torrentmetadata
num_pieces	src/btdata.h	/^int num_pieces;$/;"	v
numpeers	src/btdata.h	/^  int numpeers;$/;"	m	struct:_tracker_data
p2p_recv	peer_to_peer.c	/^int p2p_recv(char *buffer, int conn, int len){$/;"	f
p2p_recv	src/peer_to_peer.c	/^int p2p_recv(char *buffer, int conn, int len){$/;"	f
p2p_send	peer_to_peer.c	/^int p2p_send(char *buffer, int conn, int len){$/;"	f
p2p_send	src/peer_to_peer.c	/^int p2p_send(char *buffer, int conn, int len){$/;"	f
p_mark	src/btdata.h	/^char* p_mark;$/;"	v
parse_announce_url	src/parse_announce_url.c	/^announce_url_t* parse_announce_url(char* announce)$/;"	f
peer_cancel	src/btdata.h	/^} peer_cancel;$/;"	t	typeref:struct:peer_wire_cancel
peer_cancel	src/peer_to_peer.h	/^}peer_cancel;$/;"	t	typeref:struct:peer_wire_cancel
peer_have	src/btdata.h	/^} peer_have;$/;"	t	typeref:struct:peer_wire_have
peer_have	src/peer_to_peer.h	/^}peer_have;$/;"	t	typeref:struct:peer_wire_have
peer_head	src/simpletorrent.c	/^peer_list* peer_head = NULL;$/;"	v
peer_id	src/btdata.h	/^	char peer_id[20];$/;"	m	struct:_handshake
peer_id	src/btdata.h	/^  char peer_id[20];$/;"	m	struct:_tracker_request
peer_id	src/message.h	/^	char peer_id[20];$/;"	m	struct:_handshake
peer_list	src/btdata.h	/^typedef struct peer_list$/;"	s
peer_list	src/btdata.h	/^}peer_list;$/;"	t	typeref:struct:peer_list
peer_mark	src/btdata.h	/^    unsigned char *peer_mark;$/;"	m	struct:_peer_t
peer_piece_h	src/btdata.h	/^} peer_piece_h;$/;"	t	typeref:struct:peer_wire_piece_head
peer_piece_h	src/peer_to_peer.h	/^}peer_piece_h;$/;"	t	typeref:struct:peer_wire_piece_head
peer_pool	src/btdata.h	/^peer_t *peer_pool[MAX_PEERS];$/;"	v
peer_request	src/btdata.h	/^} peer_request;$/;"	t	typeref:struct:peer_wire_reqeust
peer_request	src/peer_to_peer.h	/^}peer_request;$/;"	t	typeref:struct:peer_wire_reqeust
peer_t	src/btdata.h	/^} peer_t;$/;"	t	typeref:struct:_peer_t
peer_wire	src/message.h	/^} peer_wire;$/;"	t	typeref:struct:_peer_wire
peer_wire_cancel	src/btdata.h	/^typedef struct peer_wire_cancel{$/;"	s
peer_wire_cancel	src/peer_to_peer.h	/^typedef struct peer_wire_cancel{$/;"	s
peer_wire_h	src/btdata.h	/^} peer_wire_h;$/;"	t	typeref:struct:peer_wire_head
peer_wire_h	src/peer_to_peer.h	/^}peer_wire_h;$/;"	t	typeref:struct:peer_wire_head
peer_wire_have	src/btdata.h	/^typedef struct peer_wire_have{$/;"	s
peer_wire_have	src/peer_to_peer.h	/^typedef struct peer_wire_have{$/;"	s
peer_wire_head	src/btdata.h	/^typedef struct peer_wire_head{$/;"	s
peer_wire_head	src/peer_to_peer.h	/^typedef struct peer_wire_head{$/;"	s
peer_wire_piece_head	src/btdata.h	/^typedef struct peer_wire_piece_head{$/;"	s
peer_wire_piece_head	src/peer_to_peer.h	/^typedef struct peer_wire_piece_head{$/;"	s
peer_wire_reqeust	src/btdata.h	/^typedef struct peer_wire_reqeust{$/;"	s
peer_wire_reqeust	src/peer_to_peer.h	/^typedef struct peer_wire_reqeust{$/;"	s
peerdata	src/btdata.h	/^} peerdata;$/;"	t	typeref:struct:_peerdata
peers	src/btdata.h	/^  peerdata* peers;$/;"	m	struct:_tracker_data
piece_index	src/btdata.h	/^	unsigned int piece_index;$/;"	m	struct:peer_wire_have
piece_index	src/peer_to_peer.h	/^	unsigned int piece_index;$/;"	m	struct:peer_wire_have
piece_len	src/btdata.h	/^  int piece_len;  \/\/ 每一个分片的字节数$/;"	m	struct:_torrentmetadata
piece_len	src/btdata.h	/^int piece_len;$/;"	v
pieces	src/btdata.h	/^  char* pieces;   \/\/ 针对所有分片的20字节长的SHA1哈希值连接而成的字符串$/;"	m	struct:_torrentmetadata
port	src/btdata.h	/^  int port;$/;"	m	struct:_announce_url_t
port	src/btdata.h	/^  int port;$/;"	m	struct:_peerdata
port	src/btdata.h	/^  int port;$/;"	m	struct:_tracker_request
print_file	src/simpletorrent.c	/^void* print_file()$/;"	f
private_main	src/simpletorrent.c	/^int private_main(int argc, char **argv) $/;"	f
private_parsetorrentfile	src/parsetorrentfile.c	/^torrentmetadata_t* private_parsetorrentfile(char* filename)$/;"	f
private_preprocess_tracker_response	src/process_tracker_response.c	/^tracker_response* private_preprocess_tracker_response(int sockfd)$/;"	f
public_main	src/simpletorrent.c	/^int public_main(int argc, char **argv) $/;"	f
public_parsetorrentfile	src/parsetorrentfile.c	/^torrentmetadata_t* public_parsetorrentfile(char* filename)$/;"	f
public_preprocess_tracker_response	src/process_tracker_response.c	/^tracker_response* public_preprocess_tracker_response(int sockfd)$/;"	f
recv_handler	peer_to_peer.c	/^void* recv_handler(void* pee){$/;"	f
recv_handler	src/peer_to_peer.c	/^void* recv_handler(void* pee){$/;"	f
recvline	src/util.c	/^int recvline(int fd, char **line)$/;"	f
recvlinef	src/util.c	/^int recvlinef(int fd, char *format, ...)$/;"	f
reserved	src/btdata.h	/^	char reserved[8];$/;"	m	struct:_handshake
reserved	src/message.h	/^　　	char reserved[8];$/;"	m	struct:_handshake
reverse_byte_orderi	src/util.c	/^int reverse_byte_orderi(int i)$/;"	f
s	src/bencode.h	/^		char *s;$/;"	m	union:be_node::__anon2
seeder	src/btdata.h	/^int seeder;$/;"	v
send_bitfield	src/message.c	/^void send_bitfield(int conn){$/;"	f
send_have	peer_to_peer.c	/^int send_have(peer_have *h_head){$/;"	f
send_have	src/peer_to_peer.c	/^int send_have(peer_have *h_head){$/;"	f
send_recv_mutex	src/btdata.h	/^pthread_mutex_t send_recv_mutex;		\/\/互斥锁$/;"	v
send_time	src/btdata.h	/^    int send_time;	$/;"	m	struct:_peer_t
set_connection	src/message.c	/^void* set_connection(void *peer)	\/\/需要得到info hash和peer list，这个由处理tracker端的函数返回$/;"	f
set_request	peer_to_peer.c	/^void* set_request(){			\/\/同set_connection,listen_connection一起创建$/;"	f
set_request	src/peer_to_peer.c	/^void* set_request(){			\/\/同set_connection,listen_connection一起创建$/;"	f
size	src/btdata.h	/^  int size;       \/\/ B编码字符串的字节数$/;"	m	struct:_tracker_response
sockfd	src/btdata.h	/^  int sockfd;$/;"	m	struct:_peer_t
this_peer	src/btdata.h	/^	peerdata this_peer;$/;"	m	struct:peer_list
torrentmetadata_t	src/btdata.h	/^} torrentmetadata_t;$/;"	t	typeref:struct:_torrentmetadata
tracker_count	src/parsetorrentfile.c	/^int tracker_count = 0;$/;"	v
tracker_data	src/btdata.h	/^} tracker_data;$/;"	t	typeref:struct:_tracker_data
tracker_list	src/parsetorrentfile.c	/^tracker_node tracker_list[100];$/;"	v
tracker_node	src/btdata.h	/^typedef struct tracker_node$/;"	s
tracker_node	src/btdata.h	/^}tracker_node;$/;"	t	typeref:struct:tracker_node
tracker_request	src/btdata.h	/^} tracker_request;$/;"	t	typeref:struct:_tracker_request
tracker_response	src/btdata.h	/^} tracker_response;$/;"	t	typeref:struct:_tracker_response
type	src/bencode.h	/^	be_type type;$/;"	m	struct:be_node
type	src/message.h	/^	char type;$/;"	m	struct:_peer_wire
uploaded	src/btdata.h	/^  int uploaded;$/;"	m	struct:_tracker_request
url_list	src/simpletorrent.c	/^announce_list* url_list = NULL;      \/\/ announce url列表头指针$/;"	v
val	src/bencode.h	/^	struct be_node *val;$/;"	m	struct:be_dict	typeref:struct:be_dict::be_node
val	src/bencode.h	/^	} val;$/;"	m	struct:be_node	typeref:union:be_node::__anon2
