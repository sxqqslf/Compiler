#include "btdata.h"
#include "util.h"

extern int g_done;

// 正确的关闭客户端
void client_shutdown(int sig)
{
  
	// 设置全局停止变量以停止连接到其他peer, 以及允许其他peer的连接.                                                                    Set global stop variable so that we stop trying to connect to peers and
  	// 这控制了其他peer连接的套接字和连接到其他peer的线程.
  	g_done = 1;

	// 向tracker发送stopped数据包
	int mlen;
	char* MESG = make_tracker_request(BT_STOPPED,&mlen);
	printf("##STOP:\n");
	for(int i=0; i<mlen; i++)
        	printf("%c",MESG[i]);
	announce_list* p_list = url_list;
     	// 和所有tracker都联系
     	while(p_list == url_list)
      	{
		// 如果有重复的就不发送报文了
            	int flag = 0;
            	while(flag == 0 && p_list != NULL)
            	{
                   	announce_list* q = url_list;
                    	while(q != p_list)
                    	{
                       		if(strcmp(q->info->hostname, p_list->info->hostname) == 0 && q->info->port == p_list->info->port)
                            	{
                               		flag = 1;
                                    	break;
                             	}
                            	q = q->next;
                     	}
                      	if(flag == 0)
                           	break;
                      	else
                     	{
                         	p_list = p_list->next;
                            	flag = 0;
                     	}
          	}
		int sockfd = connect_to_host(p_list->info->hostname, p_list->info->port);
		if(sockfd < 0)
		{
			printf("fail to connect to tracker\n");
			return;
		}
		if(send(sockfd, MESG, mlen, 0) <= 0)
			printf("fail to send stopped data to tracker\n");
		else
			printf("succeed to send stopped data to tracker: %s\n", p_list->info->hostname);
		
		p_list = p_list->next;

	
		// 关闭套接字, 以便再次使用
      		shutdown(sockfd,SHUT_RDWR);
   		if(close(sockfd) < 0)
		{
			printf("fail to close sockfd connected to tracker\n");	
		}
	}
	// 关闭与peers交互的套接字
	for(int i = 0; i < MAX_PEERS; i++)
	{
		if(peer_pool[i] != NULL && peer_pool[i]->sockfd >= 0)
		{
			// 关闭与之相连的套接字
			shutdown(peer_pool[i]->sockfd,SHUT_RDWR);
		}
	}
}
